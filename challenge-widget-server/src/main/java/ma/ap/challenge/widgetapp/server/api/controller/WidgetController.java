package ma.ap.challenge.widgetapp.server.api.controller;

import io.swagger.v3.oas.annotations.Operation;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import ma.ap.challenge.widgetapp.server.api.ApiModelAdapter;
import ma.ap.challenge.widgetapp.server.api.dto.WidgetDto;
import me.ap.challenge.widgetapp.core.service.WidgetService;
import me.ap.tools.jackson.deserialize.DeserializerForUpdating;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.Collection;
import java.util.NoSuchElementException;

import static ma.ap.challenge.widgetapp.server.ApiPaths.PATH_WIDGET;

@RestController
@RequestMapping(PATH_WIDGET)
@AllArgsConstructor
public class WidgetController {
    private final ApiModelAdapter model;
    private final WidgetService widgetService;
    private final DeserializerForUpdating updater;

    @GetMapping(value = "{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Get a Widget by id")
    public WidgetDto getWidget(@PathVariable Long id) {
        return model.findById(id).orElseThrow(NoSuchElementException::new);
    }

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "List all Widgets")
    public Collection<WidgetDto> getAll() {
        return model.getAll();
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "Create a Widget")
    public WidgetDto create(@Valid @RequestBody WidgetDto widget) {
        if (widget.id() != null) {
            throw new IllegalArgumentException("It is not allowed to create a Widget with id: the id is autogenerated");
        }

        return model.create(widget);
    }

    @DeleteMapping("{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @Operation(summary = "Delete a Widget by id")
    public void delete(@PathVariable Long id) {
        model.delete(id);
    }

    @PutMapping("{id}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "Replace a Widget")
    public WidgetDto update(@PathVariable Long id, @Valid @RequestBody WidgetDto updatedWidget) {
        WidgetDto original = model.getById(id);

        return model.update(original, updatedWidget);
    }

    @PatchMapping(value = "{id}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "Update a Widget")
    public WidgetDto patch(@PathVariable Long id, HttpServletRequest request) throws IOException {
        WidgetDto original = model.getById(id);
        WidgetDto updated = updater.updateFromJson(original, request.getInputStream());

        return model.update(original, updated);
    }
}
