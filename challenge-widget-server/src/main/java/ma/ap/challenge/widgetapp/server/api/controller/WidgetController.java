package ma.ap.challenge.widgetapp.server.api.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import lombok.AllArgsConstructor;
import me.ap.challenge.widgetapp.core.model.Widget;
import me.ap.challenge.widgetapp.core.service.WidgetService;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import java.io.IOException;
import java.util.Collection;
import java.util.NoSuchElementException;

import static ma.ap.challenge.widgetapp.server.ApiPaths.PATH_WIDGET;

@RestController
@RequestMapping(PATH_WIDGET)
@AllArgsConstructor
public class WidgetController {
    private final WidgetService widgetService;
    private final ObjectMapper mapper;

    @GetMapping(value = "{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Get a Widget by id")
    public Widget getWidget(@PathVariable Long id) {
        return widgetService.findById(id).orElseThrow(NoSuchElementException::new);
    }

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "List all Widgets")
    public Collection<Widget> getAll() {
        return widgetService.getAll();
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "Create a Widget")
    public Widget create(@Valid @RequestBody Widget widget) {
        if (widget.getId() != null) {
            throw new IllegalArgumentException("It is not allowed to create a Widget with id: the id is autogenerated");
        }

        return widgetService.create(widget);
    }

    @DeleteMapping("{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @Operation(summary = "Delete a Widget by id")
    public void delete(@PathVariable Long id) {
        widgetService.delete(id);
    }

    @PutMapping("{id}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "Replace a Widget")
    public Widget update(@PathVariable Long id, @Valid @RequestBody Widget widget) {
        if (widget.getId() != null) {
            throw new IllegalArgumentException("It is not allowed to modify the Widget id");
        }

        return widgetService.update(id, widget);
    }

    @PatchMapping(value = "{id}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "Update a Widget")
    public Widget patch(@PathVariable Long id, HttpServletRequest request) throws IOException {
        var original = widgetService.getById(id);
        // get a clone of the original: the business logic layer is responsible to actually change the visible state of the Widget
        var updated = original.toBuilder().build();

        mapper.readerForUpdating(updated).readValue(request.getInputStream());

        return widgetService.update(original, updated);
    }
}
