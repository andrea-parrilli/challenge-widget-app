package ma.ap.challenge.widgetapp.server.api.controller;

import ma.ap.challenge.widgetapp.server.ApiPaths;
import me.ap.challenge.widgetapp.core.model.Widget;
import me.ap.challenge.widgetapp.core.service.WidgetService;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.Collection;
import java.util.NoSuchElementException;

@RestController
@RequestMapping(ApiPaths.PATH_WIDGET)
public class WidgetController {
    private final WidgetService widgetService;

    public WidgetController(WidgetService widgetService) {
        this.widgetService = widgetService;
    }

    @GetMapping(value = "{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public Widget getWidget(@PathVariable Long id) {
        return widgetService.getById(id).orElseThrow(NoSuchElementException::new);
    }

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    public Collection<Widget> getAll() {
        return widgetService.getAll();
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.CREATED)
    public Widget create(@Valid @RequestBody Widget widget) {
        if (widget.getId() != null) {
            throw new IllegalArgumentException("It is not allowed to create a Widget with id: the id is autogenerated");
        }

        return widgetService.create(widget);
    }

    @DeleteMapping("{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void delete(@PathVariable Long id) {
        widgetService.delete(id);
    }

    @PutMapping("{id}")
    @ResponseStatus(HttpStatus.OK)
    public Widget update(@PathVariable Long id, @RequestBody @Valid Widget widget) {
        if (widget.getId() != null) {
            throw new IllegalArgumentException("It is not allowed to modify the Widget id");
        }

        return widgetService.update(id, widget);
    }
}
