package me.ap.challenge.widgetapp.server.api.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import me.ap.challenge.widgetapp.server.api.ApiModelAdapter;
import me.ap.challenge.widgetapp.server.api.dto.WidgetDto;
import me.ap.challenge.widgetapp.server.ApiPaths;
import me.ap.tools.jackson.deserialize.DeserializerForUpdating;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.Collection;
import java.util.NoSuchElementException;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping(ApiPaths.PATH_WIDGET)
@AllArgsConstructor
public class WidgetController {
    private final ApiModelAdapter model;
    private final DeserializerForUpdating updater;

    @GetMapping(value = "{id}", produces = APPLICATION_JSON_VALUE)
    @Operation(summary = "Get a Widget by id")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Widget found"),
            @ApiResponse(responseCode = "400", description = "The id is not valid"),
            @ApiResponse(responseCode = "404", description = "The Widget is not found")
    })
    public WidgetDto getWidget(@PathVariable Long id) {
        return model.findById(id).orElseThrow(NoSuchElementException::new);
    }

    @ApiResponse(responseCode = "200", description = "All Widgets are listed")
    @GetMapping(produces = APPLICATION_JSON_VALUE)
    @Operation(summary = "List all Widgets")
    public Collection<WidgetDto> getAll() {
        return model.getAll();
    }

    @PostMapping(consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "Create a Widget")
    @ApiResponses({
            @ApiResponse(responseCode = "201", description = "Widget created"),
            @ApiResponse(responseCode = "400", description = "The Widget properties are invalid")
    })
    public WidgetDto create(@Valid @RequestBody WidgetDto widget) {
        if (widget.id() != null) {
            throw new IllegalArgumentException("It is not allowed to create a Widget with id: the id is autogenerated");
        }

        return model.create(widget);
    }

    @DeleteMapping("{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @Operation(summary = "Delete a Widget by id")
    @ApiResponses({
            @ApiResponse(responseCode = "204", description = "Widget deleted or non existent"),
            @ApiResponse(responseCode = "400", description = "The id is not valid")
    })
    public void delete(@PathVariable Long id) {
        model.delete(id);
    }

    @PutMapping(path = "{id}", consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "Replace a Widget")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Widget replaced successfully"),
            @ApiResponse(responseCode = "400", description = "The id or the Widget are not valid"),
            @ApiResponse(responseCode = "404", description = "The Widget does not exist")
    })
    public WidgetDto replace(@PathVariable Long id, @Valid @RequestBody WidgetDto updatedWidget) {
        WidgetDto original = model.getById(id);

         var ret = model.update(original, updatedWidget);
         return ret;
    }

    @PatchMapping(value = "{id}", consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "Update a Widget")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Widget modified successfully"),
            @ApiResponse(responseCode = "400", description = "The id or the Widget are not valid"),
            @ApiResponse(responseCode = "404", description = "The Widget does not exist")
    })
    public WidgetDto update(@PathVariable Long id, HttpServletRequest request) throws IOException {
        WidgetDto original = model.getById(id);
        WidgetDto updated = updater.updateFromJson(original, request.getInputStream());

        return model.update(original, updated);
    }
}
